import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Objects;

public class Receipt {
    private static int serialNumberCounter = 1;
    private int serialNumber;
    private Cashier issuingCashier;
    private LocalDateTime issuanceDateTime;
    private ShoppingCart shoppingCart;
    private BigDecimal totalAmountPaid;

    public Receipt(Cashier issuingCashier, ShoppingCart shoppingCart) {
        this.serialNumber = serialNumberCounter++;
        this.issuingCashier = issuingCashier;
        this.issuanceDateTime = LocalDateTime.now();
        this.shoppingCart = shoppingCart;
        this.totalAmountPaid = shoppingCart.calculateTotalAmountToPay();
    }

    public int getSerialNumber() {
        return serialNumber;
    }

    public Cashier getIssuingCashier() {
        return issuingCashier;
    }

    public LocalDateTime getIssuanceDateTime() {
        return issuanceDateTime;
    }

    public BigDecimal getTotalAmountPaid() {
        return totalAmountPaid;
    }
    
    public void setSerialNumber(int serialNumber) {
        this.serialNumber = serialNumber;
    }

    public void setIssuingCashier(Cashier issuingCashier) {
        this.issuingCashier = issuingCashier;
    }

    public void setIssuanceDateTime(LocalDateTime issuanceDateTime) {
        this.issuanceDateTime = issuanceDateTime;
    }

    public void setTotalAmountPaid(BigDecimal totalAmountPaid) {
        this.totalAmountPaid = totalAmountPaid;
    }

    // Method to generate receipt content
    public String generateReceiptContent() {
    	int numOfChars = 25;
        StringBuilder receiptContent = new StringBuilder();
        receiptContent.append("         RECEIPT").append("\n");
        receiptContent.append(String.valueOf("=").repeat(numOfChars) + "\n");
        receiptContent.append("Serial Number: ").append(serialNumber).append("\n");
        if (issuingCashier.getName().length() < 14) {
        	receiptContent.append("Issued by: ").append(issuingCashier.getName()).append("\n");
        } else {
        	receiptContent.append("Issued by: ").append("\n");
        	receiptContent.append(" " + issuingCashier.getName()).append("\n");
        }
        receiptContent.append(String.valueOf("-").repeat(numOfChars)).append("\n");
        receiptContent.append("Date: ").append(issuanceDateTime.toString().substring(0, 10)).append("\n");
        receiptContent.append("Time: ").append(issuanceDateTime.toString().substring(11, 19)).append("\n");
        receiptContent.append(String.valueOf("-").repeat(numOfChars)).append("\n");
        
        Map<Goods, Integer> items = shoppingCart.getItems();
        
        for (Map.Entry<Goods, Integer> entry : items.entrySet()) {
            Goods goods = entry.getKey();
            int quantity = entry.getValue();
            
            String[] nameParts = splitName(goods.getName());
            receiptContent.append("-").append(quantity).append(" ");
            for (String part : nameParts) {
            	receiptContent.append(part).append(numberOfSpaces(part));
                if (part.equals(nameParts[nameParts.length - 1])) {
                    receiptContent.append(" $").append(goods.getUnitDeliveryPrice());
                }
                receiptContent.append("\n");
            }
            
        }
        receiptContent.append(String.valueOf("=").repeat(numOfChars));
        
        receiptContent.append("\n TOTAL:")
        			  .append(numberOfSpaces(shoppingCart.getCustomerMoney()))
        			  .append(" $").append(totalAmountPaid)
        			  .append("\n");
        receiptContent.append("Cash:")
        			  .append(numberOfSpaces(shoppingCart.getCustomerMoney()))
        			  .append("   $").append(shoppingCart.getCustomerMoney())
        			  .append("\n");
        receiptContent.append("Change:")
        			  .append(numberOfSpaces(shoppingCart.getCustomerMoney()))
        			  .append(" $").append(shoppingCart.getCustomerMoney().subtract(totalAmountPaid) )
        			  .append("\n");
        
        return receiptContent.toString();
    }

    private String[] splitName(String name) {
        if (name.length() <= 15) {
            return new String[] {name};
        }

        int middleIndex = name.length() / 2;
        int splitIndex = middleIndex;
        // Търсим интервал най-близо до средата, но не след средата
        while (splitIndex > 0 && name.charAt(splitIndex) != ' ') {
            splitIndex--;
        }
        // Ако няма интервал, който да разделя текста преди средата, използваме средата
        if (splitIndex == 0) {
            splitIndex = middleIndex;
        }
        String firstPart = name.substring(0, splitIndex).trim();
        String secondPart = name.substring(splitIndex).trim();
        return new String[] {firstPart, secondPart};
    }

    // Method for the spaces
    public String numberOfSpaces(Object getNameResult) {
    	String valueAsString = String.valueOf(getNameResult);
        int spacesNeeded = 15 - valueAsString.length();
        StringBuilder spaces = new StringBuilder();
        for (int i = 0; i < spacesNeeded; i++) {
            spaces.append(" ");
        }
        return spaces.toString();
    }
    
    // Method to save receipt to a file
    public void saveReceiptToFile() {
        String filename = "Receipts/Receipt_" + serialNumber + ".txt";
        try (FileWriter writer = new FileWriter(filename)) {
            writer.write(generateReceiptContent());
        } catch (IOException e) {
            System.err.println("Error occurred while saving receipt to file: " + e.getMessage());
        }
    }

	@Override
	public int hashCode() {
		return Objects.hash(serialNumber);
	}

	@Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Receipt receipt = (Receipt) o;
        return serialNumber == receipt.serialNumber;
    }
	
}import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.Objects;

public class Goods {
    private int id;
    private String name;
    private BigDecimal unitDeliveryPrice;
    private Category category;
    private LocalDate expirationDate;
    private double discountPercentage;
    private double markupPercentage;
    private int totalDelivered;
    private int quantityAvailable;

    public Goods(int id, String name, BigDecimal unitDeliveryPrice, Category category, LocalDate expirationDate,
    		double discountPercentage, int totalDelivered) {
        this.id = id;
        this.name = name;
        this.unitDeliveryPrice = unitDeliveryPrice;
        this.category = category;
        this.expirationDate = expirationDate;
        this.discountPercentage = discountPercentage;
        this.totalDelivered = totalDelivered;
        this.quantityAvailable = totalDelivered;
        this.markupPercentage = category.getValue();
    }
    
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public BigDecimal getUnitDeliveryPrice() {
        return unitDeliveryPrice;
    }
    public void setUnitDeliveryPrice(BigDecimal unitDeliveryPrice) {
        this.unitDeliveryPrice = unitDeliveryPrice;
    }
    public Category getCategory() {
        return category;
    }
    public void setCategory(Category category) {
        this.category = category;
    }
    public LocalDate getExpirationDate() {
        return expirationDate;
    }
    public void setExpirationDate(LocalDate expirationDate) {
        this.expirationDate = expirationDate;
    }
    public double getMarkupPercentage() {
        return markupPercentage;
    }
    public void setMarkupPercentage(double markupPercentage) {
        this.markupPercentage = markupPercentage;
    }
    public double getDiscountPercentage() {
        return discountPercentage;
    }
    public void setDiscountPercentage(double discountPercentage) {
        this.discountPercentage = discountPercentage;
    }
    public int getQuantityAvailable() {
        return quantityAvailable;
    }
    public void setQuantityAvailable(int quantityAvailable) {
        this.quantityAvailable = quantityAvailable;
    }
    public int getTotalDelivered() {
        return totalDelivered;
    }
    public void setTotalDelivered(int totalAvailable) {
        this.totalDelivered = totalAvailable;
    }
    public Goods getGoods() {
        return this;
    }

    // Method to check if the goods are expired
    public boolean isExpired() {
        return expirationDate != null && LocalDate.now().isAfter(expirationDate);
    }

    // Method to decrease quantity when selling goods
    public void decreaseQuantity(int quantitySold) {
        if (quantitySold > quantityAvailable) {
            throw new IllegalArgumentException("Not enough quantity available for sale.");
        }
        quantityAvailable-= quantitySold;
    }

    // Method to calculate selling price
    public BigDecimal calculateSellingPrice() {
    	if (unitDeliveryPrice == null) {
            throw new IllegalStateException("Unit delivery price is not set.");
        }
    	
        BigDecimal markupPercentage = BigDecimal.valueOf(getCategory().getValue());
        BigDecimal sellingPrice = unitDeliveryPrice.multiply(
                BigDecimal.ONE.add(markupPercentage.divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP))
        );

        if (expirationDate != null && LocalDate.now().isAfter(expirationDate.minusDays(3))) {
            BigDecimal discount = BigDecimal.valueOf(discountPercentage).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
            sellingPrice = sellingPrice.multiply(BigDecimal.ONE.subtract(discount));
        }

        return sellingPrice.setScale(2, RoundingMode.HALF_UP);
    }
     
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Goods goods = (Goods) o;
        return id == goods.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "Goods{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", unitDeliveryPrice=" + unitDeliveryPrice +
                ", category='" + category.getName() + '\'' +
                ", expirationDate=" + expirationDate +
                ", markupPercentage=" + markupPercentage +
                ", discountPercentage=" + discountPercentage +
                ", quantityAvailable=" + quantityAvailable +
                '}';
    }
}

public enum Category {
	EATABLE(0.0),
    NON_EDIBLE(0.0);

    private double value;

    Category(double value) {
        this.value = value;
    }

    public void setValue(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }
    public Category getName() {
        return this;
    }
}

import java.math.BigDecimal;
import java.util.Objects;

public class Cashier {
    private String name;
    private int id;
    private BigDecimal monthlySalary;

    public Cashier(int id, String name, BigDecimal monthlySalary) {
        this.id = id;
        this.name = name;
        this.monthlySalary = monthlySalary;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public BigDecimal getMonthlySalary() {
        return monthlySalary;
    }

    public void setMonthlySalary(BigDecimal monthlySalary) {
        this.monthlySalary = monthlySalary;
    }

    public BigDecimal calculateAnnualSalary() {
        return monthlySalary.multiply(BigDecimal.valueOf(12));
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if ((obj == null) || (getClass() != obj.getClass()))
            return false;
        Cashier other = (Cashier) obj;
        return id == other.id;
    }

    @Override
    public String toString() {
        return "Cashier{" +
                "name='" + name + '\'' +
                ", id=" + id +
                ", monthlySalary=" + monthlySalary +
                '}';
    }
}
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.Map;

public class ShoppingCart {
    private Map<Goods, Integer> items;
    private BigDecimal customerMoney;
    
    public ShoppingCart(Map<Goods, Integer> items, BigDecimal customerMoney) {
        this.items = items;
        this.customerMoney = customerMoney;
    }
    
    public Map<Goods, Integer> getItems() {
        return items;
    }

    public BigDecimal getCustomerMoney() {
        return customerMoney;
    }

    public void setCustomerMoney(BigDecimal customerMoney) {
        this.customerMoney = customerMoney;
    }
    
    public void addItem(Goods goods, int quantity) {
        if (items.containsKey(goods)) {
            int currentQuantity = items.get(goods);
            items.put(goods, currentQuantity + quantity);
        } else {
            items.put(goods, quantity);
        }
    }
    
    public void removeItem(Goods goods, int quantity) {
        if (items.containsKey(goods)) {
            int currentQuantity = items.get(goods);
            int newQuantity = Math.max(currentQuantity - quantity, 0);
            if (newQuantity > 0) {
                items.put(goods, newQuantity);
            } else {
                items.remove(goods);
            }
        }
    }
    
    public BigDecimal calculateTotalAmountToPay() {
        BigDecimal totalAmountToPay = BigDecimal.ZERO;

        for (Map.Entry<Goods, Integer> entry : items.entrySet()) {
            Goods goods = entry.getKey();
            int quantity = entry.getValue();

            if (!goods.isExpired()) {
                totalAmountToPay = totalAmountToPay.add(goods.calculateSellingPrice().multiply(BigDecimal.valueOf(quantity)));
            }
        }

        return totalAmountToPay.setScale(2, RoundingMode.HALF_UP);
    }
}
import java.math.BigDecimal;
import java.util.Map;

public class Checkout {
    private Cashier cashier;

    public Checkout(Cashier cashier) {
        this.cashier = cashier;
    }

    public Receipt sellGoods(ShoppingCart shoppingCart) {
    	Map<Goods, Integer> items = shoppingCart.getItems();
    	
        BigDecimal totalAmountToPay = shoppingCart.calculateTotalAmountToPay();

        if (shoppingCart.getCustomerMoney().compareTo(totalAmountToPay) < 0) {
            throw new IllegalArgumentException("Not enough money to buy these goods.");
        }

        for (Map.Entry<Goods, Integer> entry : items.entrySet()) {
            Goods goods = entry.getKey();
            int quantity = entry.getValue();

            if (goods.getQuantityAvailable() < quantity) {
                throw new IllegalArgumentException("Not enough quantity available for sale: " + goods.getName());
            }
            
            if (!goods.isExpired()) {
                goods.decreaseQuantity(quantity);
            }
        }

        Receipt receipt = new Receipt(cashier, shoppingCart);
        receipt.saveReceiptToFile();
        return receipt;
    }
}

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class GoodsTest {

    private Goods goods;
    private Store store;


    @BeforeEach
    public void setUp() {
    	store = new Store();
        store.setMarkup(Category.EATABLE, 20); 

        goods = new Goods(1, "Apple",  new BigDecimal("1.00"), Category.EATABLE, LocalDate.now().plusDays(5) , 5, 100);

    }

    @Test
    public void testIsExpired() {
        assertFalse(goods.isExpired(), "Goods should not be expired yet");
    }

    @Test
    public void testDecreaseQuantity() {        
        goods.decreaseQuantity(50);
        assertEquals(50, goods.getQuantityAvailable(), "Decrease quantity should update quantity available");
    }

    @Test
    public void testCalculateSellingPrice() {
        store.setMarkup(Category.EATABLE, 20); 

        BigDecimal expectedSellingPrice = BigDecimal.valueOf(1.0).multiply(BigDecimal.ONE.add(BigDecimal.valueOf(20).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP)));
        assertEquals(0, expectedSellingPrice.compareTo(goods.calculateSellingPrice()), 
                     "Selling price calculation should be correct");
    }

    @Test
    public void testEquals() {
        Goods sameGoods = new Goods(1, "Apple", new BigDecimal("1.00"), Category.EATABLE, LocalDate.now().plusDays(5) , 5, 100);
        Goods differentGoods = new Goods(2, "Orange", new BigDecimal("1.50"), Category.EATABLE, LocalDate.now().plusDays(3) , 5, 100);
        Goods sameIdDifferentName = new Goods(1, "Orange", new BigDecimal("1.00"), Category.EATABLE, LocalDate.now().plusDays(5) , 5, 100);

        assertTrue(goods.equals(sameGoods), "Goods should be equal to another goods with the same ID");
        assertFalse(goods.equals(differentGoods), "Goods should not be equal to another goods with a different ID");
        assertTrue(goods.equals(sameIdDifferentName), "Goods should be equal to another goods with the same ID but different name");
    }

    
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        
        // Reading cashiers
        List<Cashier> cashiers = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(";"))
            .map(line -> {
                String[] data = line.split(",");
                int id = Integer.parseInt(data[0]);
                String name = data[1];
                BigDecimal salary = new BigDecimal(data[2]);
                return new Cashier(id, name, salary);
            })
            .collect(Collectors.toList());

        // Reading goods
        List<Goods> goodsList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(";"))
            .map(line -> {
                String[] data = line.split(",");
                int id = Integer.parseInt(data[0]);
                String name = data[1];
                BigDecimal price = new BigDecimal(data[2]);
                Category category = Category.valueOf(data[3].toUpperCase());
                LocalDate expirationDate = LocalDate.parse(data[4]);
                Double discountPercentage = Double.parseDouble(data[5]);
                int quantity = Integer.parseInt(data[6]);
                return new Goods(id, name, price, category, expirationDate, discountPercentage, quantity);
            })
            .collect(Collectors.toList());

        // Creating store
        Store store = new Store();
        store.setMarkup(Category.EATABLE, 20);
        store.setMarkup(Category.NON_EDIBLE, 10);

        // Adding cashiers to store
        for (Cashier cashier : cashiers) {
            store.addCashier(cashier);
        }

        // Adding goods to store
        for (Goods goods : goodsList) {
            store.addGoods(goods);
        }


        // Reading shopping carts
        String line;
        int cashierIndex = 0;
        while ((line = bufferedReader.readLine()) != null && !line.isEmpty()) {
            Map<Goods, Integer> items = new HashMap<>();
            BigDecimal totalPrice = new BigDecimal(bufferedReader.readLine());

            List<String> cartItems = Stream.of(line.replaceAll("\\s+$", "").split(";"))
                .collect(Collectors.toList());

            for (String item : cartItems) {
                String[] data = item.split(",");
                int goodsId = Integer.parseInt(data[0]);
                int quantity = Integer.parseInt(data[1]);
                Goods goods = goodsList.stream().filter(g -> g.getId() == goodsId).findFirst().orElse(null);
                if (goods != null) {
                    items.put(goods, quantity);
                }
            }

            ShoppingCart cart = new ShoppingCart(items, totalPrice);
            Checkout checkout = new Checkout(cashiers.get(cashierIndex));
            cashierIndex = (cashierIndex + 1) % cashiers.size(); // Rotate the cashier
            Receipt receipt = store.checkoutClient(checkout, cart);
        }

        // Viewing financial information
        System.out.println("Total delivery costs: $" + store.calculateTotalDeliveryCosts());
        System.out.println("Total cashier salaries: $" + store.calculateTotalCashierSalaries());
        System.out.println("Total revenue: $" + store.getTotalTurnover());
        System.out.println("Total profit: $" + store.calculateTotalProfit());
        System.out.println("Total number of receipts issued: " + store.getTotalReceiptsIssued());
    }
}

/* public class Main {
    public static void main(String[] args) {
        // Use BufferedReader to read data from a file (replace "input.txt" with your actual file path)
        try (BufferedReader reader = new BufferedReader(new FileReader("input.txt"))) {
            String line;
            
            // Store
            Store store = new Store();
            
            // Read markup for categories
            line = reader.readLine();
            String[] markupData = line.split(",");
            store.setMarkup(Category.valueOf(markupData[0]), Double.parseDouble(markupData[1]));
            store.setMarkup(Category.valueOf(markupData[2]), Double.parseDouble(markupData[3]));
            
            // Read cashiers
            while ((line = reader.readLine()) != null && !line.isEmpty()) {
                String[] cashierData = line.split(",");
                int id = Integer.parseInt(cashierData[0]);
                String name = cashierData[1];
                BigDecimal salary = new BigDecimal(cashierData[2]);
                store.addCashier(new Cashier(id, name, salary));
            }
            
            // Read goods
            while ((line = reader.readLine()) != null && !line.isEmpty()) {
                String[] goodsData = line.split(",");
                int id = Integer.parseInt(goodsData[0]);
                String name = goodsData[1];
                BigDecimal price = new BigDecimal(goodsData[2]);
                Category category = Category.valueOf(goodsData[3]);
                LocalDate expiryDate = LocalDate.parse(goodsData[4]);
                int discount = Integer.parseInt(goodsData[5]);
                int stock = Integer.parseInt(goodsData[6]);
                store.addGoods(new Goods(id, name, price, category, expiryDate, discount, stock));
            }
            
            // Process shopping carts (assuming data for carts is also present in the file)
            processCarts(reader, store);
            
            // Viewing financial information
            System.out.println("Total delivery costs: $" + store.calculateTotalDeliveryCosts());
            System.out.println("Total cashier salaries: $" + store.calculateTotalCashierSalaries());
            System.out.println("Total revenue: $" + store.getTotalTurnover());
            System.out.println("Total profit: $" + store.calculateTotalProfit());
            System.out.println("Total number of receipts issued: " + store.getTotalReceiptsIssued());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private static void processCarts(BufferedReader reader, Store store) throws IOException {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] cartData = line.split(",");
            
            Map<Goods, Integer> items = new HashMap<>();
            ShoppingCart cart = new ShoppingCart(items, new BigDecimal(cartData[0])); // Use BigDecimal for total amount
            
            for (int i = 1; i < cartData.length; i++) {
                String[] itemData = cartData[i].split(":");
                Goods good = store.getGoodsById(Integer.parseInt(itemData[0]));
                int quantity = Integer.parseInt(itemData[1]);
                cart.addItem(good, quantity);
            }
            
            Checkout checkout = new Checkout(store.getCashierById(Integer.parseInt(cartData[cartData.length - 1])));
            store.checkoutClient(checkout, cart);
        }
    }
}
 */

/*
public class Main {
    public static void main(String[] args) {
    	     
        // Creating store
        Store store = new Store();
        store.setMarkup(Category.EATABLE, 20); 
        store.setMarkup(Category.NON_EDIBLE, 10); 
        
        // Adding cashiers
        Cashier cashier1 = new Cashier(1, "John Doe", new BigDecimal("1000.00"));
        Cashier cashier2 = new Cashier(2, "Anna Smith", new BigDecimal("1200.00"));
        store.addCashier(cashier1);
        store.addCashier(cashier2);

        // Adding goods
        Goods goods1 = new Goods(1, "Apple",  new BigDecimal("1.56"), Category.EATABLE, LocalDate.now().plusDays(5), 5, 1000);
        Goods goods2 = new Goods(2, "Milk",  new BigDecimal("2.00"), Category.EATABLE, LocalDate.now().plusDays(5), 5, 1000);
        store.addGoods(goods1);
        store.addGoods(goods2);
        
        // First cart
        Map<Goods, Integer> items = new HashMap<>();
        ShoppingCart cart = new ShoppingCart(items,  new BigDecimal("200.55"));
        cart.addItem(goods1, 20);
        cart.addItem(goods2, 10);
        Checkout checkout = new Checkout(cashier2);
        Receipt receipt = store.checkoutClient(checkout, cart);   
               
        // Second cart
        Map<Goods, Integer> items1 = new HashMap<>();
        ShoppingCart cart1 = new ShoppingCart(items1,  new BigDecimal("150.25"));
        cart1.addItem(goods1, 10);
        cart1.addItem(goods2, 5);
        Checkout checkout1 = new Checkout(cashier1);
        Receipt receipt1 = store.checkoutClient(checkout1, cart1);

        
        // Third cart
        Map<Goods, Integer> items2 = new HashMap<>();
        ShoppingCart cart2 = new ShoppingCart(items2, new BigDecimal("300.75"));
        cart2.addItem(goods1, 15);
        cart2.addItem(goods2, 8);
        Checkout checkout2 = new Checkout(cashier2);
        Receipt receipt2 = store.checkoutClient(checkout2, cart2);

        // Fourth cart
        Map<Goods, Integer> items3 = new HashMap<>();
        ShoppingCart cart3 = new ShoppingCart(items3, new BigDecimal("500.50"));
        cart3.addItem(goods1, 30);
        cart3.addItem(goods2, 20);
        Checkout checkout3 = new Checkout(cashier1);
        Receipt receipt3 = store.checkoutClient(checkout3, cart3);

        // Viewing financial information
        System.out.println("Total delivery costs: $" + store.calculateTotalDeliveryCosts());
        System.out.println("Total cashier salaries: $" + store.calculateTotalCashierSalaries());
        System.out.println("Total revenue: $" + store.getTotalTurnover());
        System.out.println("Total profit: $" + store.calculateTotalProfit());
        System.out.println("Total number of receipts issued: " + store.getTotalReceiptsIssued());
    }
}
*/

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.*;

public class Store {
    private Set<Cashier> cashiers;
    private Set<Receipt> receipts;
    private Map<Integer, Goods> deliveredGoods;
    private Map<Integer, Integer> soldGoods;
    private BigDecimal totalTurnover;

    public Store() {
        this.cashiers = new HashSet<>();
        this.receipts = new HashSet<>();
        this.deliveredGoods = new HashMap<>();
        this.soldGoods = new HashMap<>();
        this.totalTurnover = BigDecimal.ZERO;
    }
    
    public void addCashier(Cashier cashier) {
        cashiers.add(cashier);
    }
      
    public Cashier getCashierById(int id) {
        for (Cashier cashier : cashiers) {
          if (cashier.getId() == id) {
            return cashier;
          }
        }
        return null;
      }

    public void addGoods(Goods goods) {
        deliveredGoods.put(goods.getId(), goods);
    }

    public Goods getGoodsById(int id) {
        return deliveredGoods.get(id);
    }
    
	public BigDecimal getTotalTurnover() {
		return totalTurnover;
	}
	
    // Method to get total number of receipts issued
    public int getTotalReceiptsIssued() {
        return getReceipts().size();
    }

    // Method to check goods availability
    public boolean checkAvailability(int goodsId, int quantity) {
        Goods goods = getGoodsById(goodsId);
        if (goods == null) {
            throw new IllegalArgumentException("Goods with id " + goodsId + " not found.");
        }
        return goods.getQuantityAvailable() >= quantity;
    }

    // Method to calculate total costs for cashiers' salaries
    public BigDecimal calculateTotalCashierSalaries() {
    	 BigDecimal totalSalaries = BigDecimal.ZERO;
         for (Cashier cashier : cashiers) {
             totalSalaries = totalSalaries.add(cashier.getMonthlySalary().multiply(BigDecimal.valueOf(12)));
         }
         return totalSalaries;
    }

    // Method to calculate total costs for goods delivery
    public BigDecimal calculateTotalDeliveryCosts() {
        BigDecimal totalDeliveryCosts = BigDecimal.ZERO;
        for (Goods goods : deliveredGoods.values()) {
            totalDeliveryCosts = totalDeliveryCosts.add(goods.getUnitDeliveryPrice().multiply(BigDecimal.valueOf(goods.getTotalDelivered())));
        }
        return totalDeliveryCosts;
    }

    // Method to calculate total profit
    public BigDecimal calculateTotalProfit() {
        return getTotalTurnover().subtract(calculateTotalCashierSalaries()).subtract(calculateTotalDeliveryCosts());
    }
    
    // Method to add sold goods
    private void addSoldGoods(Goods goods, int quantitySold) {
        soldGoods.merge(goods.getId(), quantitySold, Integer::sum);
    }
    
    public Receipt checkoutClient(Checkout checkout, ShoppingCart cart) {
        Receipt receipt = checkout.sellGoods(cart);
        totalTurnover = totalTurnover.add(receipt.getTotalAmountPaid());
        receipts.add(receipt);

        for (Map.Entry<Goods, Integer> entry : cart.getItems().entrySet()) {
            Goods goods = entry.getKey();
            int quantity = entry.getValue();
            addSoldGoods(goods, quantity);
        }
        
        return receipt;
    }

    public Set<Cashier> getCashier() {
		return cashiers;
	}
    
	public Set<Receipt> getReceipts() {
		return receipts;
	}
	
    public Map<Integer, Integer> getSoldGoods() {
        return soldGoods;
    }
    
    public Map<Integer, Goods> getDeliveredGoods() {
        return deliveredGoods;
    }
	
	public void setMarkup(Category category, double value) {
        category.setValue(value);
    }
	
    public void setExpirationDateInStore(Goods good, LocalDate expirationDate) {
    	good.setExpirationDate(expirationDate);
    }
    
    public void setDiscountPercentageInStore(Goods good, double discountPercentage) {
    	good.setDiscountPercentage(discountPercentage);
    }
    
}

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

class CheckoutTest {

    private Cashier cashier;
    private Store store;
    private Checkout checkout;
    private ShoppingCart shoppingCart;
    private Goods goods1;
    private Goods goods2;

    @BeforeEach
    public void setUp() {
        cashier = new Cashier(1, "John Doe", new BigDecimal("1000.00"));
        store = new Store();
        store.setMarkup(Category.EATABLE, 20); 

        goods1 = new Goods(1, "Apple",  new BigDecimal("1.00"), Category.EATABLE, LocalDate.now().plusDays(5), 5, 100);
        goods2 = new Goods(2, "Milk",  new BigDecimal("2.00"), Category.EATABLE, LocalDate.now().plusDays(5), 5, 100);
        store.addGoods(goods1);
        store.addGoods(goods2);
        
        Map<Goods, Integer> items = new HashMap<>();
        shoppingCart = new ShoppingCart(items, new BigDecimal("100.00"));
        shoppingCart.addItem(goods1, 2);
        shoppingCart.addItem(goods2, 3);
        checkout = new Checkout(cashier);
    }

    @Test
    public void testSellGoodsSuccess() {
    	Receipt receipt = store.checkoutClient(checkout, shoppingCart);

        assertEquals(98, goods1.getQuantityAvailable());
        assertEquals(97, goods2.getQuantityAvailable());
        assertEquals(new BigDecimal("9.60"), receipt.getTotalAmountPaid());
        assertEquals(1, store.getReceipts().size());

    }
    
    @Test
    public void testSellGoodsNotEnoughQuantity() {
        goods1.setQuantityAvailable(1); // Not enough quantity

        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
        	store.checkoutClient(checkout, shoppingCart);
        });
        assertEquals("Not enough quantity available for sale: Apple", thrown.getMessage());
    }

    @Test
    public void testSellGoodsItemExpired() {
        store.setExpirationDateInStore(goods1, LocalDate.now().minusDays(1)); // Item expired

    	Receipt receipt = store.checkoutClient(checkout, shoppingCart);

        assertEquals(goods1.getTotalDelivered(), goods1.getQuantityAvailable());
        assertEquals(new BigDecimal("7.20"), receipt.getTotalAmountPaid());

    }

    

    @Test
    public void testSellGoodsNotEnoughMoney() {
        shoppingCart.setCustomerMoney(new BigDecimal("5.00")); // Not enough money

        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
        	store.checkoutClient(checkout, shoppingCart);            
        });
        assertEquals("Not enough money to buy these goods.", thrown.getMessage());
    }
}
